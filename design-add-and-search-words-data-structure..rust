use std::collections::HashMap;
use std::collections::VecDeque;
struct TrieNode {
    children: HashMap<char,TrieNode>,
    is_word: bool,
}

impl TrieNode {
    fn new() -> Self {
        TrieNode {children: HashMap::new(), is_word: false}
    }   
}


struct WordDictionary {
    root: TrieNode,
}

impl WordDictionary {

    fn new() -> Self {
        WordDictionary {root: TrieNode::new()}
    }
    
    fn add_word(&mut self, word: String) {
        let mut current_node = &mut self.root;
        
        for c in word.chars() {
            let next_node = current_node.children.entry(c)
                            .or_insert(TrieNode::new());
            current_node = next_node;
        }
        current_node.is_word = true;
    }
    
    fn search(&self, word: String) -> bool {
        let mut current_node = &self.root;
        let mut dq: VecDeque<&TrieNode> = VecDeque::new();
        dq.push_back(current_node);
        for c in word.chars() {
            if c == '.' {
                let mut l = dq.len();
                while l != 0 {
                    let el = dq.pop_front().unwrap();
                    for i in (97..126) {
                        let ch = i as u8;
                        let ch = ch as char;
                        match el.children.get(&ch) {
                            Some(next_node) => dq.push_back(next_node),
                            None => (),
                        }
                    }
                    l = l -1;
                }
                continue
            }
            let mut l = dq.len();
            while l != 0 {
                let el = dq.pop_front().unwrap();
                match el.children.get(&c) {
                    Some(next_node) => dq.push_back(next_node),
                    None => (),
                }
                l = l -1 ;
            }
            // match current_node.children.get(&c) {
            //     Some(next_node) => current_node = next_node,
            //     None => return false,
            // }
        }
        let mut ans = false;
        while !dq.is_empty() {
            let el = dq.pop_front().unwrap();
            ans = ans | el.is_word;
        }
        return ans;
    }
   
}



/** 
 * `&self` means the method takes an immutable reference.
 * If you need a mutable reference, change it to `&mut self` instead.
 */


/**
 * Your WordDictionary object will be instantiated and called as such:
 * let obj = WordDictionary::new();
 * obj.add_word(word);
 * let ret_2: bool = obj.search(word);
 */