use core::cmp::max;
fn recursive(i: i32, j: i32, s: &Vec<char>, dp: &mut Vec<Vec<i32>>)-> i32{
    let x = i as usize;
    let y = j as usize;
    if j < 0 || x >= s.len() {
        return 0;
    }
    if dp[x][y] != -1 {
        return dp[x][y];
    }
    if s[x] == s[y] {
        dp[x][y] = 1 + recursive(i + 1, j - 1, s, dp);
        return dp[x][y];
    }
    dp[x][y] =  max(recursive(i + 1, j, s, dp), recursive(i, j - 1, s, dp));
    dp[x][y]
}
fn bottomup(s: &Vec<char>)-> i32{
    let mut dp = vec![vec![0 as i32;s.len() + 1];s.len() + 1];
    for i in (0..s.len()).rev() {
        for j in (0..s.len()){
            let x = j + 1;
            if s[i] == s[j] {
                dp[i][x] =  1 +dp[i + 1][x - 1];
            }
            else {
                dp[i][x] = max(dp[i + 1][x], dp[i][x - 1]);
            }
        }
    }
    return dp[0][s.len()];
}
impl Solution {
    pub fn longest_palindrome_subseq(s: String) -> i32 {
        let s = s.chars().collect::<Vec<_>>();
        // let mut dp = vec![vec![-1 as i32;s.len()];s.len()];
        // return recursive(0, (s.len() - 1) as i32, &s, &mut dp);
        return bottomup(&s);
    }
}